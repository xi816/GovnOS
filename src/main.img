# GovnOS source code.
# See version in the file VERSION.
# See installation manual in docs/installation-manual.txt

import os;
import sys;
import datetime;
import readchar;
import subprocess as sp;
from copy import copy;
from time import sleep;
from random import choice, randint;
from dbgtools import *;
from govnosconst import *;
from govnocodeuc import *;

# Constants
SP = 0x10;
BP = 0x11;
PC = 0x12;
ZFLAG = 0x13;
OFLAG = 0x14;

arp = 0;
screenLength = os.get_terminal_size().lines-1;
screenWidth = os.get_terminal_size().columns;
drive = "DRV";
govnosExit = False;

# Shell constants
MAXSHSIZE = screenWidth-15;
DCR = True;

GOS_VER = "0.130";
ST_WEL = \
  "\nPress ^(A) to start TyGovno command mode" + \
  "\nPress ^(E) to start Command" + \
  "\nPress ^(G) to start Gravno graphics mode" + \
  "\nPress ^(L) to shutdown";

# Default run config
SHBUFSZ = 1024;
EBADCOL = 3;
ECRITCOL = 0;
DBGMODE = False;

SPCTT = " "*100;

while (arp < len(sys.argv)):
  if (sys.argv[arp] == "-s"):
    screenLength = int(sys.argv[arp+1]);
    arp += 1;
  elif (sys.argv[arp] == "-sw"):
    screenWidth = int(sys.argv[arp+1]);
    arp += 1;
  elif (sys.argv[arp] == "-d"):
    drive = sys.argv[arp+1];
    arp += 1;
  elif (sys.argv[arp] == "-1E"):
    EBADCOL = int(sys.argv[arp+1]);
    arp += 1;
  elif (sys.argv[arp] == "-2E"):
    ECRITCOL = int(sys.argv[arp+1]);
    arp += 1;
  elif (sys.argv[arp] == "-2s"):
    SHBUFSZ = int(sys.argv[arp+1]);
    arp += 1;
  elif (sys.argv[arp] == "-D"):
    DBGMODE = True;
  arp += 1;

shbuf = [0 for i in range(SHBUFSZ)];

# Initializing memory
MEMORY = [0 for i in range(1024)]; # disk
MEMORYD = [0 for i in range(1024)]; # ram
MEMORYC = [0 for i in range(1984)]; # program
MEMORYSD = [0 for i in range(64)]; # legacy ram

# GovnoCode binds
if (DBGMODE): dbg_print(f"GovnoCode EOF is set to: {nhex(GC_EOF)}");

CVWD = "*";
CUSR = "";

def print00(*args, end="", sep=" "):
  print(*args, end=end, sep=sep);
  sys.stdout.flush();

def helpUsage():
  print("USAGE: ./run <DRVNAME> [options]");
  print("Options:");
  print("-D        Debug mode");

def ucca(a):
  if (a == ""):
    return ["", ""];
  elif (a == "*"):
    return ["*", ""];
  return ["*".join(a.split("*")[:-1])+"*", a.split("*")[-1]];

def truncStr(s, maxsize, dcr=False):
  if (len(s) <= maxsize):
    return s;
  if (dcr):
    return "..."+s[-(maxsize-3):];
  return s[-maxsize:];

def getFolds(folds, CVWD):
  foldsn = [];
  for fold in folds:
    if (DBGMODE): print(folds);
    if (fold.startswith(CVWD)):
      fold = fold[len(CVWD):];
      stars = 1;
      for i in fold:
        if (i == "*"):
          stars -= 1;
      if (stars < 0):
        continue;
      foldsn.append(fold);
  return foldsn[1:];

def printScr(ss: list, scl, colors: list = [""]):
  if (len(ss) > scl):
    print("\x1B[31mError 0x0C80: not enough terminal height\x1B[0m");
  print("".join(colors), end="");
  for j in ss:
    fstr00 = "{: <" + str(screenWidth) + "}";
    print(fstr00.format(j) if len(j)<screenWidth else j[:screenWidth]);
  ssl = len(ss);
  while (ssl != scl):
    print();
    ssl += 1;

def printScr00(ss: list, scl, colors: list = [""], stopAfterEnd = False):
  if (len(ss) > scl):
    print("\x1B[31mError 0x0C00: not enough terminal height\x1B[0m");
  print("".join(colors), end="");
  print("\x1B[A"*scl, end="");
  for j in ss:
    fstr00 = "{: <" + str(screenWidth) + "}";
    print(fstr00.format(j) if len(j)<screenWidth else j[:screenWidth]);
  if (not stopAfterEnd):
    ssl = len(ss);
    while (ssl != scl):
      print(" "*screenWidth);
      ssl += 1;

def sysSOD(errorcode, col=0):
  print([["\x1B[41m", "\x1B[42m", "\x1B[43m", "\x1B[44m", "\x1B[45m", "\x1B[46m"][EBADCOL], ["\x1B[41m", "\x1B[42m", "\x1B[43m", "\x1B[44m", "\x1B[45m", "\x1B[46m"][ECRITCOL]][col], end="")
  print("                                 ");
  print("    ·     /                      ");
  print("         /                       ");
  print("         \\                       ");
  print("    ·     \\                      ");
  print("                                 ");
  print(f"Error {errorcode}                 ");
  with open(f"./man/e{errorcode[2:]}.man") as fl:
    for line in fl.read().split("\n"):
      print(f"{line: <33}");
    print("\x1B[0m");
  input();
  sys.exit(2);

def sysManual(page):
  with open(f"./man/{page:0>2}.man", "r") as fl:
    return fl.read();

def strify(l: list):
  return list(map(chr, l));

def strifyj(l: list):
  return "".join(strify(l));

def splitlsj(s: str):
  return list(map(ord, s));

def readord():
  k = readchar.readkey();
  return splitlsj(k) if len(k) > 1 else ord(k[0]);

# Function to load memory from the host hard drive
def memLoad(drive):
  rl = [];
  try:
    with open(f"./memory/{drive}/mem.dat", "r") as fl:
      mm = fl.read();
      if (mm):
        rl.append(splitlsj(mm));
      else:
        rl.append([0 for i in range(1024)]);
  except:
    sysSOD("0x00000001");
  try:
    with open(f"./memory/{drive}/memd.dat", "r") as fl:
      mm = fl.read();
      if (mm):
        rl.append(splitlsj(mm));
      else:
        rl.append([0 for i in range(1024)]);
  except:
    sysSOD("0x00000002", 1);
  try:
    with open(f"./memory/{drive}/memc.dat", "r") as fl:
      mm = fl.read();
      if (mm):
        rl.append(splitlsj(mm));
      else:
        rl.append([0 for i in range(1984)]);
  except:
    sysSOD("0x00000002", 1);
  try:
    with open(f"./memory/{drive}/memsd.dat", "r") as fl:
      mm = fl.read();
      if (mm):
        rl.append(splitlsj(mm));
      else:
        rl.append([0 for i in range(64)]);
  except:
    sysSOD("0x00000003");
  return rl;

# Function to save memory to the host hard drive
def memSave(MEM, MEMD, MEMC, MEMSD):
  with open(f"./memory/{drive}/mem.dat", "w") as fl:
    fl.write(strifyj(MEMORY));
  with open(f"./memory/{drive}/memd.dat", "w") as fl:
    fl.write(strifyj(MEMORYD));
  with open(f"./memory/{drive}/memc.dat", "w") as fl:
    fl.write(strifyj(MEMORYC));
  with open(f"./memory/{drive}/memsd.dat", "w") as fl:
    fl.write(strifyj(MEMORYSD));

# Function to dump the memory
def memDump(MEMORY, size, **kwargs):
  for i in range(size):
    print(f"|{MEMORY[i]}|", end=" ");
  if (kwargs.get("lf")):
    print();

def memDump00(MEMORY, size, **kwargs):
  tx = "";
  for i in range(size):
    tx += f"|{MEMORY[i]}|";
  if (kwargs.get("lf")):
    tx += "\n";
  return tx;

# Function to dump the memory using GovnoCode
def memDumpUnicode(MEMORY, size, **kwargs):
  mm = govnocodeToUnicode(MEMORY);
  for i in range(size):
    print(f"|{mm[i]}|", end=" ");
  if (kwargs.get("lf")):
    print();

def memDumpUnicode00(MEMORY, size, **kwargs):
  tx = "";
  mm = govnocodeToUnicode(MEMORY);
  for ix, i in enumerate(range(size)):
    tx += f"|{mm[i]: >3}|";
    if (ix % 10 == 9):
      tx += "\n"
  if (kwargs.get("lf")):
    tx += "\n";
  return tx;

# Function to put list of data into the memory
def memPut(MEMORY, ldata, stid):
  for ix, el in enumerate(ldata):
    MEMORY[stid+ix] = el;
  return MEMORY, stid+ix+1;

# Function to create a file or directory using GovnFS
def memTouch(mem, dir, name, t: str): # t=0 -> file, t=1 -> directory
  for i, j in enumerate(mem):
    if (j == GC_EOF):
      break;
  mem[i] = 0x00; # Remove the EOF to make a new entry
  if (t == 0):
    print(i);
    mem[i] = 0x72;
    mem[i+1] = 0x73;
    i += 2;
    for j,k in enumerate(unicodeToGovnocodeDir(name)):
      mem[i+j] = k;
    i += j+1;
    mem[i] = 0x73;
    i += 1;
    for j,k in enumerate(unicodeToGovnocodeDir(dir)):
      mem[i+j] = k;
    i += j+1;
    mem[i] = 0x73;
    mem[i+1] = 0x72;
    mem[i+2] = GC_EOF;
    i += 3;
  elif (t == 1):
    mem[i] = 0x71;
    mem[i+1] = 0x73;
    i += 2;
    for j,k in enumerate(unicodeToGovnocodeDir(dir)):
      mem[i+j] = k;
    i += j+1;
    for j,k in enumerate(unicodeToGovnocodeDir(name)):
      mem[i+j] = k;
    i += j+1;
    mem[i] = 0x71;
    mem[i+1] = GC_EOF;
    i += 2;
  return mem;

# Function to wipe the memory
def memorySysWipe(MEMORY):
  memsize = len(MEMORY);
  MEMORY = [GC_EOF]+[0 for i in range(memsize-1)];
  return MEMORY;

def ucToBytes(uc: str):
  pos = 0;
  res = [];
  while (pos < len(uc)):
    if (uc[pos] in govnocodePage00):
      res.append(govnocodePage00.index(uc[pos]));
    else:
      if (uc[pos] == "\\"):
        if (uc[pos+1] == "0"):
          res.append(0x00);
        elif (uc[pos+1] == "N"):
          res.append(0x70);
        elif (uc[pos+1] == "d"):
          res.append(0x71);
        elif (uc[pos+1] == "f"):
          res.append(0x72);
        elif (uc[pos+1] == "g"):
          res.append(0x73);
        elif (uc[pos+1] == "A"):
          res.append(0x74);
        elif (uc[pos+1] == "B"):
          res.append(0x75);
        elif (uc[pos+1] == "C"):
          res.append(0x76);
        elif (uc[pos+1] == "D"):
          res.append(0x77);
        elif (uc[pos+1] == "E"):
          res.append(0x78);
        elif (uc[pos+1] == "F"):
          res.append(0x79);
        elif (uc[pos+1] == "G"):
          res.append(0x7A);
        elif (uc[pos+1] == "H"):
          res.append(0x7B);
        elif (uc[pos+1] == "I"):
          res.append(0x7C);
        elif (uc[pos+1] == "J"):
          res.append(0x7D);
        elif (uc[pos+1] == "K"):
          res.append(0x7E);
        elif (uc[pos+1] == "Z"):
          res.append(0x7F);
        else:
          print(f"Illegal backslash escape: {uc[pos+1]}");
          sys.exit(61);
        pos += 1;
    pos += 1;
  return res;

def sysInstallBasic(MEMORY, username: str, password: list, hostname: str):
  installationProcess00 = ucToBytes(
    "\\d\\g*\\d\\d\\g*GRP*\\d\\f\\gSECE.C\\g*GRP*\\gROOT:"
  );
  installationProcess01 = ucToBytes(
    "\\f\\f\\gHOST\\g*GRP*\\g"
  );
  installationProcess02 = ucToBytes(
    "\\f\\d\\g*TMP*\\d\\d\\g*PROG*\\d\\d\\g*HOME*\\d\\f\\gFILE.T\\g*\\g69\\f\\d\\g*BOOT*\\d\\f\\gINIT.B\\g*BOOT*\\g411 DO*1*\\f"+\
    "\\d\\g*KERNEL*\\d"
  );
  installationProcess03 = ucToBytes(
    "\\f\\gSERIAL.A\\g*\\g14-2FA2-81\\f"
  )+[GC_EOF];
  copyFiles = {
    "ROOT.A": ["*", "ROOT.A"],
    "GRP/CPS.C": ["*GRP*", "CPS.C"],
    "KERNEL/00WEL.B": ["*KERNEL*", "00WEL.B"],
    "KERNEL/01AAA.B": ["*KERNEL*", "01AAA.B"],
    "KERNEL/02AAB.B": ["*KERNEL*", "02AAB.B"]
  };

  mem, stid = memPut(MEMORY, installationProcess00, 0);
  mem, stid = memPut(MEMORY, password[1]+[0x04]+username+[0x0B]+password[0], stid);
  mem, stid = memPut(MEMORY, installationProcess01, stid);
  mem, stid = memPut(MEMORY, hostname, stid);
  mem, stid = memPut(MEMORY, installationProcess02, stid);
  mem, stid = memPut(MEMORY, installationProcess03, stid);
  with open(f"./memory/{drive}/mem.dat", "w") as fl:
    fl.write(strifyj(mem));
  for fle in copyFiles:
    print(f"  Copying {''.join(copyFiles[fle])}...");
    sp.run(["./tools/mput", "DRV", fle, copyFiles[fle][0], copyFiles[fle][1]]);
  with open(f"./memory/{drive}/mem.dat", "rb") as fl:
    mem = list(fl.read());
  sleep(0.5);
  return mem;

def sysScreenUpdate():
  print(" "*5000);

def contAddr(MEMORY, FILEDIR, FILENAME):
  filestart, namestart, dirstart, insstart = fsReadFile(MEMORY, FILEDIR, FILENAME)[2:6];
  return filestart, namestart, dirstart, insstart;

def randLetter():
  return chr(randint(97, 123));

def sysExec(MEMORY, CVWD, govnshCommand, CPS):
  govnshCommand = govnshCommand.split(" :: ");
  addinfo = "";
  if (len(govnshCommand) == 1):
    return sysExecLine(MEMORY, CVWD, govnshCommand[0], CPS);
  elif (len(govnshCommand) > 1):
    for i in govnshCommand:
      retc, MEMORY, CVWD, _, addinfo00, addi01 = sysExecLine(MEMORY, CVWD, i, CPS);
      addinfo += addinfo00;
    return retc, MEMORY, CVWD, True, addinfo, addi01;

def sysExecLine(MEMORY, CVWD, govnshCommand, CPS):
  gpath = govnshCommand.split();
  for i,j in enumerate(gpath):
    gpath[i] = j.upper();
  addinfoA = False;
  addinfo = "";
  govnosExit = False;
  govnshExit = False;
  if (DBGMODE): print(gpath);
  govnshExitCode = 0;
  if (not govnshCommand):
    return None;
  elif (gpath[0] == "BS"):
    sp.run("clear");
  elif (gpath[0] == "ECH"):
    print(gpath[1:]);
  elif (gpath[0] == "HELP"):
    if ((len(gpath) == 2) and (gpath[1].isdigit())):
      addinfoA = True;
      addinfo = sysManual(page=govnshCommand.split()[1]);
    elif (len(gpath) == 1):
      addinfoA = True;
      addinfo = "Use `help 0` to read the manual";
    else:
      addinfoA = True;
      addinfo = "\x1B[31mInvalid `help` | Expected 0 or 1 argument\x1B[0m";
  elif (gpath[0] == "WTF"):
    addinfoA = True;
    if (len(gpath) == 1):
        addinfo = "\x1B[32mWhat? 4880\x1B[0m";
    elif (len(gpath) == 2):
      if (gpath[1] == "GOVNOS"):
        addinfo = "\x1B[32mGOVNOS POSHALKO!? 1488\x1B[0m";
      elif (gpath[1] == "4880"):
        addinfo = "\x1B[32mWhat do you want? govnos\x1B[0m";
  elif (gpath[0] == "TIME"):
    addinfoA = True;
    dt = datetime.datetime.now();
    if (gpath[1] == "-T"):
      addinfo = f"{dt.hour}:{dt.minute}:{dt.second}";
    elif (gpath[1] == "-DATE"):
      addinfo = f"{dt.month}.{dt.day}.{dt.year}";
    elif (gpath[1] == "-DAY"):
      addinfo = f"{dt.day}";
    elif (gpath[1] == "-MON"):
      addinfo = f"{dt.month}";
    elif (gpath[1] == "-YEA"):
      addinfo = f"{dt.year}";
    elif (gpath[1] == "-HOU"):
      addinfo = f"{dt.hour}";
    elif (gpath[1] == "-MIN"):
      addinfo = f"{dt.minute}";
    elif (gpath[1] == "-SEC"):
      addinfo = f"{dt.second}";
    elif (gpath[1] == "-MIL"):
      addinfo = f"{dt.millisecond}";
  elif (gpath[0] == "WD"):
    addinfoA = True;
    if (len(gpath) > 1):
      addinfo = "\x1B[31mInvalid `wd` | Expected 0 arguments\x1B[0m";
    else:
      addinfo = CVWD;
  elif (gpath[0] == "SHUTDOWN"):
    if (len(gpath) > 1):
      addinfo = "\x1B[31mInvalid `shutdown` | Expected 0 arguments\x1B[0m";
    else:
      govnshExit = True;
  elif (gpath[0] == "HE"):
    addinfoA = True;
    if (len(gpath) == 1):
      addinfo = "\n".join(fsParseHe(MEMORY, CVWD)[0]);
    elif (len(gpath) == 2):
      dex00 = fsDirExist(MEMORY, CVWD, gpath[1])[0];
      if (not dex00):
        addinfo = "\n".join(fsParseHe(MEMORY, CVWD+govnshCommand.split()[1])[0]);
      else:
        addinfo = f"\x1B[31mDirectory {gpath[1]} not found.\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `he` | Expected 0 or 1 argument\x1B[0m";
  elif (gpath[0] == "INSIDE"):
    addinfoA = True;
    if (len(gpath) == 2):
      retcode, container = fsReadFile(MEMORY, CVWD, govnshCommand.split()[1])[:2];
      if (not retcode):
        addinfo = "".join(govnocodeToUnicode(container));
      elif (retcode == 1):
        addinfo = f"\x1B[31mCould not find the file {govnshCommand.split()[1]}\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `inside` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "DIR"):
    addinfoA = True;
    if (len(gpath) == 2):
      MEMORY = memTouch(copy(MEMORY), CVWD, gpath[1], 1);
      addinfo = f"\x1B[32mCreated the directory {gpath[1]}\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `dir` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "FILE"):
    addinfoA = True;
    if (len(gpath) == 2):
      MEMORY = memTouch(copy(MEMORY), CVWD+(ucca(gpath[1])[0]), ucca(gpath[1])[1], 0);
      addinfo = f"\x1B[32mCreated the file {ucca(gpath[1])[1]}\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `file` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "BA"):
    if (len(gpath) == 1):
      if (CVWD == "*"):
        addinfoA = True;
        addinfo = f"\x1B[32mPOSHALKO 1488\x1B[0m";
      else:
        CVWD = "*".join(CVWD[:-1].split("*")[:-1])+"*";
    else:
      addinfo = "\x1B[31mInvalid `ba` | Expected 0 arguments\x1B[0m";
  elif (gpath[0] == "EXIT"):
    govnshExit = True;
    if (len(gpath) == 1):
      govnshExitCode = 0;
    elif (len(gpath) == 2):
      govnshExitCode = int(gpath[1]);
    else:
      addinfo = "\x1B[31mInvalid `exit` | Expected 0 or 1 argument\x1B[0m";
  elif (gpath[0] == "REN"):
    if (len(gpath) == 3):
      contaddrs = fsReadFile(MEMORY, CVWD, gpath[0]);
      if (DBGMODE): print(contaddrs, CVWD, gpath[0]);
      contaddrs00 = contaddrs[0];
      contaddrs = contaddrs[2:6];
      if (contaddrs00 == 1):
        addinfo = f"\x1B[31mFile {gpath[0]} not found\x1B[0m";
      elif (len(gpath[1]) < len(gpath[0])):
        for i,j in enumerate(gpath[1]):
          MEMORY[contaddrs[1]+i] = unicodeToGovnocodeDir(gpath[1][i])[0];
        for j in range(len(gpath[0])-len(gpath[1])):
          MEMORY.pop(contaddrs[1]+i+1);
        MEMORY += [0 for i in range(len(gpath[0])-len(gpath[1]))];
      elif (len(gpath[1]) == len(gpath[0])):
        for i,j in enumerate(gpath[0]):
          MEMORY[contaddrs[1]+i] = unicodeToGovnocodeDir(gpath[1][i])[0];
      else:
        for i,j in enumerate(gpath[0]):
          MEMORY[contaddrs[1]+i] = unicodeToGovnocodeDir(gpath[1][i])[0];
        i = len(gpath[0]);
        for j in range(len(gpath[1])-len(gpath[0])):
          MEMORY.insert(contaddrs[1]+i+j, unicodeToGovnocodeDir(gpath[1][i+j])[0]);
        MEMORY = MEMORY[:-(len(gpath[1])-len(gpath[0]))];
      addinfo = "\x1B[32mFile succesfully renamed.\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `ren` | Expected 2 arguments\x1B[0m";
  elif (gpath[0] == "DXS"):
    addinfoA = True;
    fsx = fsDirExist(MEMORY, CVWD, gpath[1]);
    if (fsx[0] == 0):
      addinfo = f"Directory {gpath[1]} exists.";
    else:
      addinfo = f"Directory {gpath[1]} does not exist.";
  elif (gpath[0] == "FXS"):
    addinfoA = True;
    fsx = fsFileInfo(MEMORY, CVWD, gpath[1])[0];
    if (fsx != 69420):
      addinfo = f"File {gpath[1]} exists.";
    else:
      addinfo = f"File {gpath[1]} does not exist.";
  elif (gpath[0] == "LOD"):
    if (len(gpath) == 3):
      progidx = int(gpath[2], base=16);
      if (fsFileInfo(MEMORY, CVWD, gpath[1])[0] != 69420):
        progcon = fsReadFile(MEMORY, CVWD, gpath[1])[2];
        MEMORYD = MemLoadProgram(progcon, progidx, MEMORYD);
        addinfoA = True;
        addinfo = f"\x1B[32mLoaded program {gpath[1]} at index {nhex(progidx)[2:]:0>4}h\x1B[0m";
      else:
        addinfo = f"\x1B[31mProgram file {gpath[1]} not found.\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `lod` | Expected 3 arguments\x1B[0m";
  elif (gpath[0] == "UPC"):
    addinfoA = True;
    addinfo = "\x1B[32mRefreshing settings...\x1B[0m";
    screenLength = os.get_terminal_size().lines-1;
    screenWidth = os.get_terminal_size().columns;
    CPS = govnocodeToUnicode01(fsReadFile(MEMORY, "*GRP*", "CPS.C")[1]);
  elif (gpath[0] == "RMV"):
    if (len(gpath) == 2):
      rdfl = fsReadFile(MEMORY, CVWD, govnshCommand.split()[1]);
      addinfoA = True;
      if (rdfl[0] == 0):
        MEMORY = fsRemFile(copy(MEMORY), rdfl[2])[1];
        addinfo = f"\x1B[32mRemoved file {govnshCommand.split()[1]}\x1B[0m";
      else:
        addinfo = f"\x1B[31mFile {govnshCommand.split()[1]} not found\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `rmv` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "RMD"):
    if (len(gpath) == 2):
      addinfoA = True;
      rdfl = fsReadFile(MEMORY, CVWD, govnshCommand.split()[1]);
      if (rdfl[0] == 0):
        MEMORY = fsRemDir(copy(MEMORY), rdfl[2])[1];
        addinfo = f"\x1B[32mRemoved directory {govnshCommand.split()[1]}\x1B[0m";
      else:
        addinfo = f"\x1B[31mDirectory {govnshCommand.split()[1]} not found\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `rmd` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "TO"):
    addinfoA = True;
    if (len(gpath) == 2):
      if (gpath[1] in list(map(lambda a: a[len(CVWD):], fsParseHe(MEMORY, CVWD)[1]))):
        CVWD += gpath[1];
        addinfo = f"\x1B[32mMoved to the folder {gpath[1]}\x1B[0m";
      else:
        addinfo = f"\x1B[31mFolder not found: {govnshCommand.split()[-1]}\x1B[0m";
    else:
      addinfo = "\x1B[31mInvalid `to` | Expected 1 argument\x1B[0m";
  elif (gpath[0] == "SYS.MEMDUMP"):
    addinfoA = True;
    if ((len(gpath) < 2) and (len(gpath) > 3)):
      addinfo = "\x1B[31mInvalid `sys.memdump` | Expected 1 or 2 arguments\x1B[0m";
    else:
      if (gpath[1] == "-U"):
        addinfoA = True;
        if (gpath[2].isdigit()):
          print(govnshCommand.split());
          addinfo = memDumpUnicode00(copy(MEMORY), int(gpath[2]));
        else:
          addinfo = memDumpUnicode00(copy(MEMORY), 20);
      else:
        addinfo = memDump00(MEMORY, 20);
        if (govnshCommand.split()[-1].isdigit()):
          addinfo = memDump00(MEMORY, int(govnshCommand.split()[-1]));
        else:
          addinfo = memDump00(MEMORY, 20);
  else:
    addinfoA = True;
    addinfo = f"\x1B[31mUnknown command `{gpath[0]}`\x1B[0m";
  return govnshExitCode, MEMORY, CVWD, addinfoA, addinfo, (govnosExit, govnshExit, CPS);

def sysGovnSh(CVWD, CPS, prtsc=False):
  global govnosExit, MEMORY;
  govnshCommand = "";
  govnshCList = [];
  govnshExit = False;
  GEXITCODE = 0;
  print00(f"{CPS}");
  while (not govnshExit):
    pk = readord();
    addinfo = False;
    addinfoA = [];
    if ((pk in GVS_UC_KEY_LETTERS) or (pk in GVS_UC_KEY_DIGITS) or (pk in GVS_UC_KEY_SPECSYMS)):
      govnshCommand += chr(pk);
      print00(f"\r{CPS}{truncStr(govnshCommand, MAXSHSIZE, DCR)}");
    elif (pk == 32):
      govnshCommand += " ";
      print00(" ");
    elif (pk == [27, 91, 50, 48, 126]):
      govnshCommand += randLetter();
    elif (pk == 10):
      print00("\n");
      if (govnshCommand):
        GEXITCODE, MEMORY, CVWD, addinfoA, addinfo, (govnosExit, govnshExit, CPS) = sysExec(MEMORY, CVWD, govnshCommand, CPS);
        if (prtsc):
          if (addinfo): print00(addinfo, end="\n");
          else: print00(addinfo);
      govnshCList.append(govnshCommand);
      govnshCommand = "";
      print00(f"{CPS}");
    elif (pk == [27, 91, 68]):
      if (govnshCommand):
        govnshCommand = govnshCommand[:-1];
        print00(f"\r{CPS}{truncStr(govnshCommand, MAXSHSIZE, DCR)}");
    elif (pk == 127):
      if (govnshCommand):
        govnshCommand = govnshCommand[:-1];
        print00(f"\r{CPS}{truncStr(govnshCommand, MAXSHSIZE, DCR)}   \x1B[D\x1B[D\x1B[D");
    elif (pk == [27, 27]):
      govnshExit = True;
      govnosExit = True;
    if (not prtsc):
      if (addinfoA):
        printScr00([f"{CPS}{truncStr(govnshCommand, MAXSHSIZE, DCR)}_", f"Key pressed: {pk}", ""]+addinfo.split("\n"), screenLength);
      else:
        printScr00([f"{CPS}{truncStr(govnshCommand, MAXSHSIZE, DCR)}_", f"Key pressed: {pk}"], screenLength);
  return govnshCList;

def sysGravno(CVWD):
  gravnoComm = "";
  gravnomode = True;
  scr = [""]*(screenLength-7);
  # Gravno states:
  # 0 -- Normal
  # 1 -- Command
  gravnostate = 0;
  k = readord();

  while (gravnomode):
    tm = datetime.datetime.now();
    tmf = f"{tm.hour:0>2}:{tm.minute:0>2}";
    tmf00 = "GovnOS 0.122";
    tmf = ("{:}{: >"+f"{screenWidth-len(tmf00)}"+"}").format(tmf00, tmf);
    printScr00([
      tmf,
      "-"*screenWidth,
      f"{k}"
      ]+scr+[
      "-"*screenWidth,
      gravnoComm+["@", "_"][gravnostate],
      "-"*screenWidth,
      "^(A)=Comm ^(W)=Term"
    ], screenLength);
    k = readord();
    if (gravnostate == 0):
      if (k == [27, 81]):
        gravnomode = False;
      elif (k == 1):
        gravnostate = 1;
      elif (k == 8):
        scr = [""]*(screenLength-7);
      elif (k == 23):
        scr[0] = "Terminal";
    elif (gravnostate == 1):
      if (k == 1):
        gravnostate = 0;
      elif ((k in GVS_UC_KEY_LETTERS) or (k in GVS_UC_KEY_DIGITS) or (k in GVS_UC_KEY_SPECSYMS) or (k == 32)):
        gravnoComm += chr(k);
      elif (k == 10):
        if (gravnoComm.split(" ")[0] == "echo"):
          scr[int(gravnoComm.split(" ")[1])] = " ".join(gravnoComm.split(" ")[2:]);
        elif (gravnoComm == "exit"):
          gravnomode = False;
        gravnoComm = "";
        gravnostate = 0;
      elif (k == 127):
        if (gravnoComm):
          gravnoComm = gravnoComm[:-1];
  return 0;

def getcons(l: list, ix: int):
  return list(map(lambda a: a[ix], l));

# Function to halt before some event
def sysHalt(event, **kwargs):
  if (event == 0):
    k = 0;
    while (k != kwargs["haltkey"]):
      k = readord();

# Filesystem things
def fsParseHe(MEMORY, CVWD):
  pos = 0;
  fsn = "";
  foldsFound = [];
  filesFound = [];
  while (MEMORY[pos] != GC_EOF):
    if (DBGMODE): print(f"\x1B[32mFolders: {foldsFound}, {filesFound}. Pos: {pos}\x1B[0m");
    if (MEMORY[pos] == 0x71): # directory found
      diraddr = pos;
      fsn = "";
      pos += 2;
      while (MEMORY[pos] != 0x71):
        fsn += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      foldsFound.append(fsn);
      fsn = "";
      pos += 1;
    elif (MEMORY[pos] == 0x72): # file found
      diraddr = pos;
      fsn = ["", ""];
      pos += 2;
      while (MEMORY[pos] != 0x73):
        fsn[0] += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      while (MEMORY[pos] != 0x73):
        fsn[1] += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      if (fsn[1] == CVWD):
        filesFound.append(fsn[0]);
        fsn = "";
      while (MEMORY[pos] != 0x72):
        pos += 1;
      pos += 1;
    else:
      if (DBGMODE): print(f"\x1B[31mUnknown symbol found while folder parsing -> {MEMORY[pos]}. {pos}\x1B[0m");
  drvinfo = ["\x1B[A"];
  if (CVWD == "*"):
    drvinfo = ["Root Drive (*)", "Drive Serial: "+govnocodeToUnicode01(fsReadFile(MEMORY, "*", "SERIAL.A")[1])];
  foldsNeeded = drvinfo+[f"Data in {CVWD}:"]+(list(map(lambda a: f"  {a: <10}               DIR", getFolds(foldsFound, CVWD))))+list(map(lambda a: f"  {a: <10} {nhex(fsFileInfo(MEMORY, CVWD, a)[1])[2:]:0>8} {nhex(fsFileInfo(MEMORY, CVWD, a)[0])[2:]:0>4} FILE", filesFound));
  if (DBGMODE): print(f"\x1B[32m{foldsNeeded}\x1B[0m");
  return foldsNeeded, foldsFound;

def fsFileInfo(MEMORY, CVWD, FIN):
  pos = 0;
  ins = [];
  fins = "";
  fins00 = "";
  FILESTART = 69420;
  FILESIZE = 69420;
  while ((MEMORY[pos] != GC_EOF)):
    if (MEMORY[pos] == 0x72):
      FILESTART = pos;
      fins = "";
      fins00 = "";
      pos += 2; # start of filename
      while (MEMORY[pos] != 0x73):
        fins00 += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      while (MEMORY[pos] != 0x73):
        fins += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      if (fins+fins00 == CVWD+FIN): # found the file
        FILESIZE = 0;
        while (MEMORY[pos] != 0x72):
          FILESIZE += 1;
          ins.append(MEMORY[pos]);
          pos += 1;
        return FILESIZE, FILESTART;
      else:
        while (MEMORY[pos] != 0x72):
          pos += 1;
      pos += 1;
    elif (MEMORY[pos] == 0x71):
      pos += 2;
      while (MEMORY[pos] != 0x71):
        pos += 1;
      pos += 1;
    else:
      print(f"\x1B[31m-> {MEMORY[pos]}. {pos}\x1B[0m");
  return FILESIZE, FILESTART;

def fsDirExist(MEMORY, CVWD, DIN):
  pos = 0;
  ins = [];
  fins = "";
  finished = False;
  DIRADDR = 69420;
  while ((MEMORY[pos] != GC_EOF)):
    if (MEMORY[pos] == 0x72):
      pos += 2;
      while (MEMORY[pos] != 0x72):
        pos += 1;
      pos += 1;
    elif (MEMORY[pos] == 0x71):
      fins = "";
      DIRADDR = pos;
      pos += 2;
      while (MEMORY[pos] != 0x71):
        fins += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      if (fins == CVWD+DIN):
        return 0, DIRADDR;
      pos += 1;
    else:
      print(f"\x1B[31m-> {MEMORY[pos]}. {pos}\x1B[0m");
  return 1, DIRADDR;

def fsReadFile(MEMORY, CVWD, FIN):
  pos = 0;
  ins = [];
  fins = "";
  fins00 = "";
  finished = False;
  FILEADDR = 69420;
  NAMEADDR = 69420;
  DIRADDR = 69420;
  INSADDR = 69420;
  while ((MEMORY[pos] != GC_EOF)):
    if (MEMORY[pos] == 0x72):
      FILEADDR = pos;
      fins = "";
      fins00 = "";
      pos += 2; # start of filename
      NAMEADDR = pos;
      while (MEMORY[pos] != 0x73):
        fins00 += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      DIRADDR = pos;
      while (MEMORY[pos] != 0x73):
        fins += govnocodeToUnicode00(MEMORY[pos]);
        pos += 1;
      pos += 1;
      if (fins+fins00 == CVWD+FIN): # found the file
        INSADDR = pos;
        while (MEMORY[pos] != 0x72):
          ins.append(MEMORY[pos]);
          pos += 1;
        return 0, ins, FILEADDR, NAMEADDR, DIRADDR, INSADDR;
      else:
        while (MEMORY[pos] != 0x72):
          pos += 1;
      pos += 1;
    elif (MEMORY[pos] == 0x71):
      pos += 2;
      while (MEMORY[pos] != 0x71):
        pos += 1;
      pos += 1;
    else:
      print(f"\x1B[31m-> {MEMORY[pos]}. {pos}\x1B[0m");
  return 1, ins, 69420, 69420, 69420, 69420;

def fsRemFile(MEMORY, FILESTART):
  fsz = 0;
  MEMORY.pop(FILESTART);
  while (MEMORY[FILESTART] != 0x72):
    MEMORY.pop(FILESTART);
    if (DBGMODE): print(govnocodeToUnicode01(MEMORY[FILESTART-10:FILESTART+10]));
  MEMORY.pop(FILESTART);
  if (DBGMODE): print(govnocodeToUnicode01(MEMORY[FILESTART-10:FILESTART+10]));
  return 0, MEMORY;

def fsRemDir(MEMORY, FILESTART):
  fsz = 0;
  MEMORY.pop(FILESTART);
  while (MEMORY[FILESTART] != 0x71):
    MEMORY.pop(FILESTART);
    if (DBGMODE): print(govnocodeToUnicode01(MEMORY[FILESTART-10:FILESTART+10]));
  MEMORY.pop(FILESTART);
  if (DBGMODE): print(govnocodeToUnicode01(MEMORY[FILESTART-10:FILESTART+10]));
  sys.exit(101);
  return 0, MEMORY;

def sysReadSece(s: str):
  s = s.split(" ");
  ss = dict();
  for i,j in enumerate(s):
    ss[s[i].split(":")[0]] = s[i].split(":")[1];
  return ss;

def sysShutdown(M, MD, MC, MSD, exit=False):
  print("Shutting down...");
  memSave(M, MD, MC, MSD);
  if (exit):
    sys.exit(41);

def sysInstallSh(MEMORY):
  gssScr = ["\x1B[44m\x1B[37mWelcome to GovnOS!", f"\x1B[47m\x1B[30mLoading drive (2s for retry)...", ""];
  printScr00(gssScr, screenLength, "");
  sleep(0.5);
  gssScr = ["\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  printScr00(gssScr, screenLength, "");
  sleep(0.2);

  # OS installation if it's not installed
  in00 = {"host": "GOVNOS"};
  gssScr.append("Installation started...");
  gssScr.append("Press Ret to continue");
  printScr00(gssScr, screenLength, "");
  input();

  gssScr.pop();
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user              <<<<", "  2. Change root password", "  3. Change hostname", "  4. Save changes to drive", "  5. Finish", "\x1B[44m\x1B[37mPress Ret to continue."];
  printScr00(gssScr, screenLength, "");
  printScr00(gssScr, screenLength, "", True);
  gssScr.append("\x1B[44m\x1B[37mEnter username: ");
  printScr00(gssScr, screenLength, "", True);
  in01 = input("").upper();
  gssScr.append("OK.");
  gssScr.append("Enter password: ");
  printScr00(gssScr, screenLength, "", True);
  in02 = input("").upper();
  gssScr.append("OK.");
  printScr00(gssScr, screenLength, "", True);
  in00["user"] = [in01, in02, 0x00];
  gssScr = [f"{str(os.system('clear'))*0}\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user", "  2. Change root password    <<<<", "  3. Change hostname", "  4. Save changes to drive", "  5. Finish", "\x1B[44m\x1B[37mPress Ret to continue."];
  printScr00(gssScr, screenLength, "", True);
  gssScr.append("\x1B[44m\x1B[37mEnter root password: ");
  printScr00(gssScr, screenLength, "", True);
  in01 = input("").upper();
  gssScr.append("OK.");
  printScr00(gssScr, screenLength, "", True);
  in00["root"] = in01;
  gssScr = [f"{str(os.system('clear'))*0}\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user", "  2. Change root password", "  3. Change hostname       <<<<", "  4. Save changes to drive", "  5. Finish", "\x1B[44m\x1B[37mPress Ret to continue."];
  printScr00(gssScr, screenLength, "", True);
  gssScr.append("Enter hostname: ");
  printScr00(gssScr, screenLength, "", True);
  in01 = input().upper();
  gssScr.append("OK.");
  printScr00(gssScr, screenLength, "", True);
  in00["host"] = in01;
  sleep(0.5);
  gssScr = [f"{str(os.system('clear'))*0}\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user", "  2. Change root password", "  3. Change hostname",	"  4. Save changes to drive <<<<", "  5. Finish", "\x1B[44m\x1B[37mPress Ret to continue."];
  printScr00(gssScr, screenLength, "", True);
  gssScr.append("  Building a filesystem...");
  gssScr.append("  Installing GovnFS Basic Memory Bootstrap...");
  MEMORY = sysInstallBasic(MEMORY, unicodeToGovnocodeDir(in00["user"][0]), (unicodeToGovnocodeDir(in00["user"][1]), unicodeToGovnocodeDir(in00["root"])), unicodeToGovnocodeDir(in00["host"]));
  printScr00(gssScr, screenLength, "", True);
  sleep(1);
  gssScr = [f"{str(os.system('clear'))*0}\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user", "  2. Change root password", "  3. Change hostname", "  4. Save changes to drive", "  5. Finish                <<<<", f"\x1B[44m\x1B[37mYour drive serial number is: 14-2FA2-81.", "Press Ret to continue."];
  printScr00(gssScr, screenLength, "", True);
  input();
  gssScr = [f"{str(os.system('clear'))*0}\x1B[44m\x1B[37mWelcome to GovnOS!", "\x1B[47m\x1B[30mLoading drive...", f"\x1B[44m\x1B[37mVersion: {GOS_VER}", "Loaded."];
  gssScr += ["\x1B[47m\x1B[30m  1. Add a user", "  2. Change root password", "  3. Change hostname", "  4. Save changes to drive", "  5. Finish                <<<<", "\x1B[44m\x1B[37mInstallation finished!", "Press Ret to continue."];
  printScr00(gssScr, screenLength, "", True);
  input();
  return 0, MEMORY;

def MemLoadProgram(prog, addr, MD):
  for i,j in enumerate(prog):
    MD[addr+i] = j;
  return MD;

def GovnBin(M, MD, MC, MSD):
  print("Govno Core 32");
  cpu[PC] = 0;
  print("Process end");
  return 0;

def CPUReset(cpu):
  cpu[PC] = 0x0000;
  cpu[SP] = 0xFFFF;
  return cpu;

def sysGovnKernel(CDRV, MEMORY, CVWD, hostname, CUSR):
  print(f"GovnOS {GOS_VER}");
  print("Loading...");
  print(f"  MEMORY {len(MEMORY)} bytes +");
  print(f"  MEMORY {len(MEMORYD)} bytes +");
  print(f"  MEMORY {len(MEMORYC)} bytes +");
  print(f"  MEMORY {len(MEMORYSD)} bytes");
  print("\nGovnOS loaded!");
  print(f"Welcome, {hostname}");

  print("\nStarting GovnoLM...");
  usr00 = input("User: ").upper();
  usr01 = input("Password: ").upper();

  SeceC = govnocodeToUnicode01(fsReadFile(MEMORY, "*GRP*", "SECE.C")[1]);
  SeceC = sysReadSece(SeceC);
  while (SeceC.get(usr00) != usr01):
    print("Incorrect login or password!");
    usr00 = input("User: ").upper();
    usr01 = input("Password: ").upper();

  CDRV = sys.argv[1]; # Set drive name to the one it loaded from
  CUSR = usr00; # Enter to the system
  # If CUSR is not ROOT, spawn in *HOME* by default.
  if (CUSR != "ROOT"):
    CVWD = "*HOME*";
  CPS = f"{CUSR} => ";
  print(ST_WEL);
  govnshCList = [];
  govnosExit = False;

  # Native shell -> GovnOS
  while (not govnosExit):
    k = readord();
    if (k == 0x01):
      print("\nLoading TyGovno...");
      print("TyGovno loaded!");
      print("Use `help 0` to get help");
      govnshCList = sysGovnSh(CVWD, CPS, False);
      print(ST_WEL);
    elif (k == 0x05):
      print("\nLoading Command...");
      print("Use `help 0` to get help");
      govnshCList = sysGovnSh(CVWD, CPS, True);
      print(ST_WEL);
    elif (k == 0x07):
      print("\nLoading Gravno...");
      print("Gravno loaded!");
      sysGravno(CVWD);
      print(ST_WEL);
    elif (k == 0x0C):
      govnosExit = True;
  return 0, govnshCList;

# Turn on the machine (load memory)
MEMORY, MEMORYD, MEMORYC, MEMORYSD = memLoad(drive);
CPU = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, # R0-RF
  0, 0, 0,                                        # SP, BP, PC
  0, 0,                                           # FLAGS (ZF, OF)
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # E0-EF
];

if ((not MEMORY[0]) or (MEMORY[0] == GC_EOF)):
  installexitcode, MEMORY = sysInstallSh(MEMORY);
  sysShutdown(MEMORY, MEMORYD, MEMORYC, MEMORYSD);
  sys.exit(21);

hostname = govnocodeToUnicode01(fsReadFile(MEMORY, "*GRP*", "HOST")[1]);
CDRV = "GVSLOAD"; # Load manager

exitcd, govnshCList = sysGovnKernel(CDRV, MEMORY, CVWD, hostname, CUSR);
sysShutdown(MEMORY, MEMORYD, MEMORYC, MEMORYSD);

# Saving the terminal history to memory/DRV/govnCList.dat
with open(f"./memory/{drive}/govnCList.dat", "w") as fl:
  fl.write("\n".join(govnshCList));

sys.exit(61);

